{"version":3,"sources":["components/NavBar.jsx","components/About.jsx","components/StarRating.jsx","components/Shop.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","console","log","Navbar","bg","variant","Brand","href","src","width","height","className","alt","Nav","to","About","Container","Row","StarRating","state","selectedStars","props","totalStars","firstMethod","Array","map","el","i","key","icon","faStar","secondMethod","faStarHalfAlt","this","Fragment","Number","isInteger","Component","Shop","useState","shopItems","setShopItems","favoriteItems","setFavoriteItems","cardStyle","color","backgroundColor","padding","marginTop","marginLeft","useEffect","fetchItems","a","fetch","response","json","responseData","data","style","display","shopItem","itemId","item","name","Card","onClick","e","clickedItem","status","elementValue","currentTarget","getAttribute","setAttribute","favoriteItem","filter","filteredItems","toggleFavorite","value","data-value","Img","images","Body","Title","Text","ratings","avgStars","totalPoints","numberVotes","Button","encodeURIComponent","JSON","stringify","downloadJson","disabled","length","download","pointerEvents","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7ece3ce7.chunk.js","sourcesContent":["import React from 'react';\nimport { Nav, Navbar } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nconst NavBar = () => {\n  console.log('Navbar rendered');\n  return (\n    <Navbar bg=\"primary\" variant=\"dark\">\n      <Navbar.Brand href=\"#home\">\n        <img\n          src=\"/fortnite.jpg\"\n          width=\"30\"\n          height=\"30\"\n          className=\"d-inline-block align-top\"\n          alt=\"React Bootstrap logo\"\n        />\n      </Navbar.Brand>\n\n      <Nav className=\"ml-auto\">\n        <Link className=\"nav-link\" to=\"/about\">\n          About\n        </Link>\n      </Nav>\n    </Navbar>\n  );\n};\n\nexport default NavBar;\n","import React from 'react';\nimport { Row, Container } from 'react-bootstrap';\nimport '../App.css';\n\nexport default function About() {\n  return (\n    <div className=\"about\">\n      <Container>\n        <Row>\n          <h4>About Fortnite Characters</h4>\n          <h6>\n            In Fortnite, characters can do a great list of things when talked to\n            by players which includes giving Quests, being hired, being dueled,\n            and selling and upgrading Items. There are two types of Characters,\n            Hunters and Vendors. Hunters are most known for giving Quests\n            involving eliminating or dealing damage to other players like Bounty\n            Quests which are Quests in which players need to eliminate a\n            specific player, they can also be dueled for a Weapon and hired to\n            eliminate other players. Vendors are most known for selling and\n            upgrading Weapons, Healing Items, and Materials which can be\n            upgraded by them and purchased when players give them Bars.\n          </h6>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStar, faStarHalfAlt } from '@fortawesome/free-solid-svg-icons';\n\nclass StarRating extends Component {\n  state = {\n    selectedStars: this.props.selectedStars,\n    totalStars: 6,\n  };\n\n  firstMethod = () => {\n    const { selectedStars, totalStars } = this.state;\n    return [...Array(totalStars)].map((el, i) =>\n      i < selectedStars ? <FontAwesomeIcon key={i} icon={faStar} /> : null\n    );\n  };\n\n  secondMethod = () => {\n    // implement the code for full and half stars here.\n    const { selectedStars, totalStars } = this.state;\n    return [...Array(totalStars)].map((el, i) =>\n      // check if current star should be half\n      i < selectedStars && i + 1 > selectedStars ? (\n        <FontAwesomeIcon key={i} icon={faStarHalfAlt} />\n      ) : // check if current star should be full\n      i < selectedStars ? (\n        <FontAwesomeIcon key={i} icon={faStar} />\n      ) : null\n    );\n  };\n\n  render() {\n    const { selectedStars } = this.state;\n    return (\n      <React.Fragment>\n        {Number.isInteger(selectedStars)\n          ? this.firstMethod()\n          : this.secondMethod()}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default StarRating;\n","import React, { useState, useEffect } from 'react';\nimport { Container, Row, Card, Button } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport StarRating from './StarRating';\nimport '../App.css';\n\nfunction Shop() {\n  const [shopItems, setShopItems] = useState([]);\n  let [favoriteItems, setFavoriteItems] = useState([]);\n  const cardStyle = {\n    color: 'white',\n    backgroundColor: '#17a2b8',\n    padding: '10px',\n    width: '18rem',\n    marginTop: '2rem',\n    marginLeft: '2rem',\n  };\n\n  useEffect(() => {\n    fetchItems();\n  }, []);\n\n  const fetchItems = async () => {\n    const response = await fetch(\n      'https://fortnite-api.theapinetwork.com/upcoming/get'\n    );\n    const responseData = await response.json();\n\n    setShopItems(responseData.data);\n  };\n\n  const toggleFavorite = (e, clickedItem) => {\n    let elementValue = e.currentTarget;\n    let status;\n    if (elementValue.getAttribute('data-value') === 'true') {\n      status = false;\n    } else {\n      status = true;\n    }\n    elementValue.setAttribute('data-value', status);\n\n    if (status) {\n      elementValue.style.backgroundColor = '#28a745';\n      let favoriteItem = shopItems.filter(\n        (item) => item.itemId === clickedItem.itemId\n      );\n      setFavoriteItems((favoriteItems = [...favoriteItems, ...favoriteItem]));\n    } else {\n      let filteredItems = favoriteItems.filter(\n        (item) => item.itemId !== clickedItem.itemId\n      );\n      elementValue.style.backgroundColor = '#17a2b8';\n      setFavoriteItems((favoriteItems = [...filteredItems]));\n    }\n  };\n\n  function downloadJson(favoriteItems) {\n    return `data:text/json;charset=utf-8,${encodeURIComponent(\n      JSON.stringify(favoriteItems)\n    )}`;\n  }\n\n  return (\n    <div>\n      <h5 className=\"text-center pt-4\">\n        Select one or more fortnite cards to download your favorite ones\n      </h5>\n      <div style={{ display: 'none' }}>\n        {shopItems.map((shopItem) => (\n          <h3\n            className=\"text-center\"\n            style={{ color: 'white' }}\n            key={shopItem.itemId}\n          >\n            <Link to={`shop/${shopItem.itemId}`}>{shopItem.item.name}</Link>\n          </h3>\n        ))}\n      </div>\n      <div>\n        <Container>\n          <Row>\n            {shopItems.map((shopItem) => (\n              <Card\n                key={shopItem.itemId}\n                style={cardStyle}\n                onClick={(e) => toggleFavorite(e, shopItem)}\n                value={false}\n                data-value={false}\n              >\n                <Card.Img variant=\"top\" src={shopItem.item.images['icon']} />\n                <Card.Body className=\"mt-1\">\n                  <Card.Title>{shopItem.item.name}</Card.Title>\n                  <Card.Text>\n                    Average Stars:\n                    <StarRating\n                      selectedStars={shopItem.item.ratings.avgStars}\n                    ></StarRating>\n                    <br />\n                    Points:{shopItem.item.ratings.totalPoints}\n                    <br />\n                    Total votes:{shopItem.item.ratings.numberVotes}\n                  </Card.Text>\n                </Card.Body>\n              </Card>\n            ))}\n          </Row>\n          <Row className=\"text-center\">\n            <Button\n              href={downloadJson(favoriteItems)}\n              className=\"mt-3 mx-auto w-50 p-3\"\n              disabled={favoriteItems.length > 0 ? false : true}\n              variant={favoriteItems.length > 0 ? 'primary' : 'secondary'}\n              download=\"filename.json\"\n              style={{\n                color: favoriteItems.length > 0 ? '#ffffff' : '#9e9e9e',\n                pointerEvents: favoriteItems.length > 0 ? 'auto' : 'none',\n              }}\n            >\n              Export Favorites\n            </Button>\n          </Row>\n        </Container>\n      </div>\n    </div>\n  );\n}\n\nexport default Shop;\n","import React, { Component } from 'react';\nimport { Route, Switch, BrowserRouter } from 'react-router-dom';\nimport NavBar from './components/NavBar';\nimport About from './components/About';\nimport Shop from './components/Shop';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <NavBar />\n        <Switch>\n          <Route path=\"/\" exact component={Shop}></Route>\n          <Route path=\"/about\" component={About}></Route>\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import {BrowserRouter as Router,Route,Link} from 'react-router-dom';\n//import { Router, Route } from 'react-router';\nimport './index.css';\nimport App from './App';\n//import About from './components/About'\n//import NavBar from './components/navbar'\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n//ReactDOM.render(<Counter props='props' />, document.getElementById('root'));\nReactDOM.render(<App  />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}